import{a as S}from"./chunk-IAUCWH3R.js";import{d as g}from"./chunk-DOMNBE5L.js";import{d as h}from"./chunk-7OGW3PNS.js";import{W as i,_ as l,da as a,g as s}from"./chunk-BSJZAB7M.js";var T=(()=>{class n{constructor(e,t){this.http=e,this.router=t,this.baseUrl=`${S.authApiUrl}/api/auth`,this.currentUserSubject=new s(null),this.tokenSubject=new s(null),this.tenantsSubject=new s([]),this.currentTenantSubject=new s(null),this.currentUser$=this.currentUserSubject.asObservable(),this.token$=this.tokenSubject.asObservable(),this.tenants$=this.tenantsSubject.asObservable(),this.currentTenant$=this.currentTenantSubject.asObservable(),this.loadStoredAuth()}login(e){return this.http.post(`${this.baseUrl}/login`,e).pipe(i(t=>{console.log("Login response:",t),t.success&&(console.log("Setting auth for user:",t.data.user),console.log("Tenants received:",t.data.tenants),this.setAuth(t.data.user,t.data.token,t.data.tenants),console.log("Auth set successfully. Current tenant:",this.getCurrentTenant()))}))}logout(){console.log("Logging out..."),this.clearAuth(),localStorage.removeItem("accessToken"),console.log("Auth data cleared"),this.router.navigate(["/sign-in"])}isAuthenticated(){return!!this.tokenSubject.value}getCurrentUser(){return this.currentUserSubject.value}getToken(){return this.tokenSubject.value}hasRole(e){return this.getCurrentUser()?.role===e}hasAnyRole(e){let t=this.getCurrentUser();return t?e.includes(t.role):!1}getTenants(){return this.tenantsSubject.value}getCurrentTenant(){return this.currentTenantSubject.value}setCurrentTenant(e){this.currentTenantSubject.next(e),e?localStorage.setItem("current_tenant",JSON.stringify(e)):localStorage.removeItem("current_tenant")}setAuth(e,t,r){console.log("setAuth called with:",{user:e,tenants:r}),this.currentUserSubject.next(e),this.tokenSubject.next(t),this.tenantsSubject.next(r),r&&r.length>0&&(console.log("Setting first tenant:",r[0]),this.setCurrentTenant(r[0])),localStorage.setItem("auth_token",t),localStorage.setItem("current_user",JSON.stringify(e)),localStorage.setItem("tenants",JSON.stringify(r)),console.log("Current tenant after setAuth:",this.getCurrentTenant())}clearAuth(){this.currentUserSubject.next(null),this.tokenSubject.next(null),this.tenantsSubject.next([]),this.currentTenantSubject.next(null),localStorage.removeItem("auth_token"),localStorage.removeItem("current_user"),localStorage.removeItem("tenants"),localStorage.removeItem("current_tenant")}loadStoredAuth(){localStorage.getItem("accessToken")&&(console.log("Clearing old accessToken from previous auth system"),localStorage.removeItem("accessToken"));let t=localStorage.getItem("auth_token"),r=localStorage.getItem("current_user"),u=localStorage.getItem("tenants"),c=localStorage.getItem("current_tenant");if(console.log("Loading stored auth data:",{hasToken:!!t,hasUser:!!r}),t&&r)try{let o=JSON.parse(r);if(this.tokenSubject.next(t),this.currentUserSubject.next(o),u){let m=JSON.parse(u);this.tenantsSubject.next(m),c&&this.currentTenantSubject.next(JSON.parse(c))}console.log("Stored auth data loaded successfully")}catch(o){console.error("Error parsing stored user:",o),this.clearAuth()}else console.log("No stored auth data found")}canManageSessions(){return this.hasAnyRole(["admin","operator","supervisor"])}canManagePayments(){return this.hasAnyRole(["admin","cashier","supervisor"])}canManageDebts(){return this.hasAnyRole(["admin","supervisor"])}canManageSectors(){return this.hasAnyRole(["admin","supervisor"])}canManageOperators(){return this.hasAnyRole(["admin","supervisor"])}canViewReports(){return this.hasAnyRole(["admin","supervisor","manager"])}canManageSettings(){return this.hasRole("admin")}static{this.\u0275fac=function(t){return new(t||n)(a(h),a(g))}}static{this.\u0275prov=l({token:n,factory:n.\u0275fac,providedIn:"root"})}}return n})();export{T as a};
