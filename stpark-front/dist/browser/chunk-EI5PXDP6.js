import{a as u}from"./chunk-VKB6BRO6.js";import{d as p}from"./chunk-DOMNBE5L.js";import{d as c}from"./chunk-7OGW3PNS.js";import{B as d,W as o,_ as a,da as i,ea as b,g as s,l as f,p as S}from"./chunk-BSJZAB7M.js";import{a as g}from"./chunk-TSRGIXR5.js";var v=(()=>{class n{constructor(){this._httpClient=b(c),this._systemConfig=new s({name:"STPark - Sistema de Gesti\xF3n de Estacionamientos",currency:"CLP",timezone:"America/Santiago",language:"es"}),this._configLoaded=!1}loadConfig(){return this._httpClient.get(`${u.apiUrl}/settings/general`).pipe(o(e=>{this._systemConfig.next(e),this._configLoaded=!0,console.log("Configuraci\xF3n del sistema cargada:",e)}),d(e=>(console.error("Error al cargar configuraci\xF3n del sistema:",e),f(this._systemConfig.value))))}refreshConfig(){this.loadConfig().subscribe()}isConfigLoaded(){return this._configLoaded}get systemConfig$(){return this._systemConfig.asObservable()}getSystemConfig(){return this._systemConfig.value}getSystemName(){return this._systemConfig.value.name}getSystemName$(){return this._systemConfig.asObservable().pipe(S(e=>e.name))}getCurrency(){return this._systemConfig.value.currency}getTimezone(){return this._systemConfig.value.timezone}getLanguage(){return this._systemConfig.value.language}static{this.\u0275fac=function(t){return new(t||n)}}static{this.\u0275prov=a({token:n,factory:n.\u0275fac,providedIn:"root"})}}return n})();var $=(()=>{class n{constructor(e,t,r){this.http=e,this.router=t,this.configService=r,this.baseUrl=`${u.authApiUrl}/api/auth`,this.currentUserSubject=new s(null),this.tokenSubject=new s(null),this.tenantsSubject=new s([]),this.currentTenantSubject=new s(null),this.currentUser$=this.currentUserSubject.asObservable(),this.token$=this.tokenSubject.asObservable(),this.tenants$=this.tenantsSubject.asObservable(),this.currentTenant$=this.currentTenantSubject.asObservable(),this.loadStoredAuth()}login(e){return this.http.post(`${this.baseUrl}/login`,e).pipe(o(t=>{console.log("Login response:",t),t.success&&(console.log("Setting auth for user:",t.data.user),console.log("Tenants received:",t.data.tenants),this.setAuth(t.data.user,t.data.token,t.data.tenants),console.log("Auth set successfully. Current tenant:",this.getCurrentTenant()),this.loadSystemConfig())}))}loadSystemConfig(){this.configService.loadConfig().subscribe({next:e=>{console.log("Configuraci\xF3n del sistema cargada exitosamente:",e)},error:e=>{console.error("Error al cargar configuraci\xF3n del sistema:",e)}})}logout(){console.log("Logging out..."),this.clearAuth(),localStorage.removeItem("accessToken"),console.log("Auth data cleared"),this.router.navigate(["/sign-in"])}isAuthenticated(){return!!this.tokenSubject.value}getCurrentUser(){return this.currentUserSubject.value}updateCurrentUser(e){let t=this.currentUserSubject.value;if(t){let r=g(g({},t),e);this.currentUserSubject.next(r),localStorage.setItem("current_user",JSON.stringify(r))}}getToken(){return this.tokenSubject.value}hasRole(e){return this.getCurrentUser()?.role===e}hasAnyRole(e){let t=this.getCurrentUser();return t?e.includes(t.role):!1}getTenants(){return this.tenantsSubject.value}getCurrentTenant(){return this.currentTenantSubject.value}setCurrentTenant(e){this.currentTenantSubject.next(e),e?localStorage.setItem("current_tenant",JSON.stringify(e)):localStorage.removeItem("current_tenant")}setAuth(e,t,r){console.log("setAuth called with:",{user:e,tenants:r}),this.currentUserSubject.next(e),this.tokenSubject.next(t),this.tenantsSubject.next(r),r&&r.length>0&&(console.log("Setting first tenant:",r[0]),this.setCurrentTenant(r[0])),localStorage.setItem("auth_token",t),localStorage.setItem("current_user",JSON.stringify(e)),localStorage.setItem("tenants",JSON.stringify(r)),console.log("Current tenant after setAuth:",this.getCurrentTenant())}clearAuth(){this.currentUserSubject.next(null),this.tokenSubject.next(null),this.tenantsSubject.next([]),this.currentTenantSubject.next(null),localStorage.removeItem("auth_token"),localStorage.removeItem("current_user"),localStorage.removeItem("tenants"),localStorage.removeItem("current_tenant")}loadStoredAuth(){localStorage.getItem("accessToken")&&(console.log("Clearing old accessToken from previous auth system"),localStorage.removeItem("accessToken"));let t=localStorage.getItem("auth_token"),r=localStorage.getItem("current_user"),h=localStorage.getItem("tenants"),m=localStorage.getItem("current_tenant");if(console.log("Loading stored auth data:",{hasToken:!!t,hasUser:!!r}),t&&r)try{let l=JSON.parse(r);if(this.tokenSubject.next(t),this.currentUserSubject.next(l),h){let C=JSON.parse(h);this.tenantsSubject.next(C),m&&this.currentTenantSubject.next(JSON.parse(m))}console.log("Stored auth data loaded successfully")}catch(l){console.error("Error parsing stored user:",l),this.clearAuth()}else console.log("No stored auth data found")}canManageSessions(){return this.hasAnyRole(["admin","operator","supervisor"])}canManagePayments(){return this.hasAnyRole(["admin","cashier","supervisor"])}canManageDebts(){return this.hasAnyRole(["admin","supervisor"])}canManageSectors(){return this.hasAnyRole(["admin","supervisor"])}canManageOperators(){return this.hasAnyRole(["admin","supervisor"])}canViewReports(){return this.hasAnyRole(["admin","supervisor","manager"])}canManageSettings(){return this.hasRole("admin")}static{this.\u0275fac=function(t){return new(t||n)(i(c),i(p),i(v))}}static{this.\u0275prov=a({token:n,factory:n.\u0275fac,providedIn:"root"})}}return n})();export{$ as a};
